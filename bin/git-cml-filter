#!/usr/bin/env python

import argparse
import os
import sys
import subprocess
import re
import json
import git
import logging
import hashlib
from collections import defaultdict, OrderedDict

from git_cml import git_utils, checkpoints, params, file_io

logging.basicConfig(
    level=logging.DEBUG,
    format="git-cml-filter: [%(asctime)s] %(levelname)s - %(message)s",
)


def parse_args():
    parser = argparse.ArgumentParser("git-cml filter program")
    subparsers = parser.add_subparsers(title="Commands", dest="command")
    subparsers.required = True

    clean_parser = subparsers.add_parser("clean", help="clean filter")
    clean_parser.add_argument("file", help="file being passed to clean filter")
    clean_parser.set_defaults(func=clean)

    smudge_parser = subparsers.add_parser("smudge", help="smudge filter")
    smudge_parser.add_argument("file", help="file being passed to smudge filter")
    smudge_parser.set_defaults(func=smudge)

    args = parser.parse_args()
    return args


def clean(args):
    """
    Implements clean filter for model files
    """
    logging.debug("Running clean filter on %s", args.file)

    repo = git_utils.get_git_repo()
    model_path = git_utils.get_relative_path_from_root(repo, args.file)
    cml_model_dir = git_utils.get_git_cml_model_dir(repo, model_path)

    model_checkpoint = checkpoints.PyTorchCheckpoint.from_file(sys.stdin.buffer)
    staged_file_contents = OrderedDict({"model_dir": model_path})
    for param, keys in checkpoints.iterate_dict_leaves(model_checkpoint):
        param_name = "/".join(keys)
        staged_file_contents[f"{param_name} shape"] = params.get_shape_str(param)
        staged_file_contents[f"{param_name} dtype"] = params.get_dtype_str(param)
        staged_file_contents[f"{param_name} hash"] = params.get_hash(param)

    file_io.write_staged_file(sys.stdout, staged_file_contents)


def smudge(args):
    """
    Implements smudge filter for model files
    """
    logging.debug("Running smudge filter on %s", args.file)

    repo = git_utils.get_git_repo()
    staged_file = file_io.load_staged_file(sys.stdin)

    model_dict = defaultdict(dict)
    for leaf_dir, keys in checkpoints.iterate_dir_leaves(
        os.path.abspath(staged_file["model_dir"])
    ):
        param_file = os.path.join(leaf_dir, "params")
        logging.debug("Populating model parameter %s", '/'.join(keys))
        d = model_dict
        for k in keys[:-1]:
            d = d[k]
        d[keys[-1]] = file_io.load_tracked_file(param_file)

    model_checkpoint = checkpoints.PyTorchCheckpoint(model_dict)
    model_checkpoint.save(sys.stdout.buffer)


if __name__ == "__main__":
    args = parse_args()
    args.func(args)
