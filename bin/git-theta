#!/usr/bin/env python

import argparse
import os
import sys
import git
import logging

from git_theta import git_utils, checkpoints, file_io, utils

logging.basicConfig(
    level=logging.DEBUG, format="git-theta: [%(asctime)s] %(levelname)s - %(message)s"
)


def parse_args():
    parser = argparse.ArgumentParser(description="git-theta filter program")
    subparsers = parser.add_subparsers(title="Commands", dest="command")
    subparsers.required = True

    add_parser = subparsers.add_parser(
        "add", help="add command used to stage a model file"
    )
    add_parser.add_argument("file", help="file being staged")
    add_parser.add_argument("--type", help="The type of checkpoint we are adding.")
    add_parser.set_defaults(func=add)

    install_parser = subparsers.add_parser(
        "install", help="install command used to setup global .gitconfig"
    )
    install_parser.set_defaults(func=install)

    track_parser = subparsers.add_parser(
        "track",
        help="track command used to identify model checkpoint for git-theta to track",
    )
    track_parser.add_argument(
        "file", help="model checkpoint file or file pattern to track"
    )
    track_parser.set_defaults(func=track)

    args = parser.parse_args()
    return args


def paths_and_parameters(model_dict, root):
    """Convert the keys of the model dict to parameters based starting at root."""
    return {os.path.join(root, *k): v for k, v in utils.flatten(model_dict).items()}


def add(args):
    """
    Splits model parameters file into parameter groups on filesystem and stages files
    """
    repo = git_utils.get_git_repo()
    model_path = git_utils.get_relative_path_from_root(repo, args.file)
    theta_model_dir = git_utils.get_git_theta_model_dir(repo, model_path, create=True)

    # TODO: Don't default to pytorch once other checkpoint formats are supported.
    checkpoint_type = args.type or "pytorch"
    checkpoint = checkpoints.get_checkpoint(checkpoint_type)
    param_dict = checkpoint.from_file(args.file)
    for param_dir, param in paths_and_parameters(param_dict, theta_model_dir).items():
        param_file = os.path.join(param_dir, "params")
        os.makedirs(param_file, exist_ok=True)
        file_io.write_tracked_file(param_file, param)
        git_utils.add_file(param_file, repo)

    for param_file in utils.removed_params(param_dict, utils.walk_parameter_dir(theta_model_dir)):
        git_utils.remove_file(param_file, repo)

    git_utils.add_file(model_path, repo)


def install(args):
    """
    Install git-lfs and initialize the git-theta filter driver
    """
    git_utils.git_lfs_install()
    config_writer = git.GitConfigParser(
        git.config.get_config_path("global"), config_level="global", read_only=False
    )
    config_writer.remove_option('filter "lfs"', "process")
    config_writer.set_value('filter "theta"', "clean", "git-theta-filter clean %f")
    config_writer.set_value('filter "theta"', "smudge", "git-theta-filter smudge %f")
    config_writer.set_value('filter "theta"', "required", "true")
    config_writer.release()


def track(args):
    """
    Track a particular model checkpoint file with git-theta
    """
    repo = git_utils.get_git_repo()
    model_path = git_utils.get_relative_path_from_root(repo, args.file)

    # Initialize git lfs to track model files in .git_theta
    theta_model_dir = git_utils.get_git_theta_model_dir(repo, model_path)
    git_utils.git_lfs_track(repo, theta_model_dir)

    gitattributes_file = git_utils.get_gitattributes_file(repo)
    gitattributes = git_utils.read_gitattributes(gitattributes_file)

    new_gitattributes = git_utils.add_filter_theta_to_gitattributes(gitattributes, model_path)

    git_utils.write_gitattributes(gitattributes_file, new_gitattributes)
    git_utils.add_file(gitattributes_file, repo)


if __name__ == "__main__":
    args = parse_args()
    args.func(args)
