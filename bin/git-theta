#!/usr/bin/env python

import argparse
import os
import sys
import git
import logging
import re
import fnmatch
import json
import subprocess

from git_theta import git_utils, checkpoints, file_io, utils, theta, params

logging.basicConfig(
    level=logging.DEBUG, format="git-theta: [%(asctime)s] [%(funcName)s] %(levelname)s - %(message)s"
)


def parse_args():
    parser = argparse.ArgumentParser(description="git-theta filter program")
    subparsers = parser.add_subparsers(title="Commands", dest="command")
    subparsers.required = True

    post_commit_parser = subparsers.add_parser("post-commit", help="post-commit command that records parameter groups changed in a commit")
    post_commit_parser.set_defaults(func=post_commit)

    pre_push_parser = subparsers.add_parser(
        "pre-push", help="pre-push command used to send parameter groups to an LFS store. Should only be called internally by git push."
    )
    pre_push_parser.add_argument("remote_name", help="Name of the remote being pushed to")
    pre_push_parser.add_argument("remote_location", help="Location of the remote being pushed to")
    pre_push_parser.set_defaults(func=pre_push)


    install_parser = subparsers.add_parser(
        "install", help="install command used to setup global .gitconfig"
    )
    install_parser.set_defaults(func=install)

    track_parser = subparsers.add_parser(
        "track",
        help="track command used to identify model checkpoint for git-theta to track",
    )
    track_parser.add_argument(
        "file", help="model checkpoint file or file pattern to track"
    )
    track_parser.set_defaults(func=track)

    add_parser = subparsers.add_parser(
        "add", help="add command used to stage files."
    )
    add_parser.add_argument("--update-type", choices=["dense", "sparse"], help="Type of update being applied")
    add_parser.set_defaults(func=add)

    args = parser.parse_known_args()
    return args


def post_commit(args, unparsed_args):
    repo = git_utils.get_git_repo()
    theta_commits = theta.ThetaCommits(repo)

    gitattributes_file = git_utils.get_gitattributes_file(repo)
    patterns = git_utils.get_gitattributes_tracked_patterns(gitattributes_file)

    oids = set()
    commit = repo.commit('HEAD')
    for obj in commit.tree.traverse():
        if any([fnmatch.fnmatchcase(obj.path, pattern) for pattern in patterns]):
            metadata = file_io.load_metadata_file(obj.data_stream).flatten()

            prev_obj = git_utils.get_file_version(repo, obj.path, 'HEAD~1')
            if prev_obj:
                prev_metadata = file_io.load_metadata_file(prev_obj.data_stream).flatten()
            else:
                prev_metadata = params.Metadata()

            added, removed, modified = metadata.diff(prev_metadata)
            oids.update([param.lfs_metadata.oid for param in added + modified])

    theta_commits.write_commit_oids(commit.hexsha, oids)


def pre_push(args, unparsed_args):
    """
    Pre-push git hook for sending objects to the LFS server
    """
    repo = git_utils.get_git_repo()
    theta_commits = theta.ThetaCommits(repo)

    gitattributes_file = git_utils.get_gitattributes_file(repo)
    patterns = git_utils.get_gitattributes_tracked_patterns(gitattributes_file)

    # Read lines of the form <local ref> <local sha1> <remote ref> <remote sha1> LF
    lines = sys.stdin.readlines()
    lines_parsed = [re.match('^(?P<local_ref>[^\s]+) (?P<local_sha1>[^\s]+) (?P<remote_ref>[^\s]+) (?P<remote_sha1>[^\s]+)\n$', l) for l in lines]
    commit_ranges = [(l.group('remote_sha1'), l.group('local_sha1')) for l in lines_parsed]
    oids = theta_commits.get_commit_oids_ranges(*commit_ranges)
    git_utils.git_lfs_push_oids(args.remote_name, oids)


def install(args, unparsed_args):
    """
    Install git-lfs and initialize the git-theta filter driver
    """
    config_writer = git.GitConfigParser(
        git.config.get_config_path("global"), config_level="global", read_only=False
    )
    config_writer.set_value('filter "theta"', "clean", "git-theta-filter clean %f")
    config_writer.set_value('filter "theta"', "smudge", "git-theta-filter smudge %f")
    config_writer.set_value('filter "theta"', "required", "true")
    config_writer.release()


def track(args, unparsed_args):
    """
    Track a particular model checkpoint file with git-theta
    """
    repo = git_utils.get_git_repo()
    model_path = git_utils.get_relative_path_from_root(repo, args.file)

    gitattributes_file = git_utils.get_gitattributes_file(repo)
    gitattributes = git_utils.read_gitattributes(gitattributes_file)

    new_gitattributes = git_utils.add_filter_theta_to_gitattributes(gitattributes, model_path)

    git_utils.write_gitattributes(gitattributes_file, new_gitattributes)
    git_utils.add_file(gitattributes_file, repo)


def add(args, unparsed_args):
    env_vars = {utils.EnvVarConstants.UPDATE_TYPE: args.update_type}
    with utils.augment_environment(**env_vars):
        command = ['git', 'add'] + unparsed_args
        logging.debug(f'Running {" ".join(command)}')
        subprocess.run(command)


if __name__ == "__main__":
    args, unparsed_args = parse_args()
    if not args.func == install:
        git_utils.set_hooks()
    args.func(args, unparsed_args)
